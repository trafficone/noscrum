DROP TABLE IF EXISTS epic;
DROP TABLE IF EXISTS sprint;
DROP TABLE IF EXISTS story;
DROP TABLE IF EXISTS tag;
DROP TABLE IF EXISTS tag_story;
DROP TABLE IF EXISTS task;
DROP TABLE IF EXISTS work;
CREATE TABLE epic (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    epic TEXT UNIQUE NOT NULL,
    deadline DATE,
    color text
);

CREATE TABLE sprint (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    startDate DATE NOT NULL,
    endDate DATE NOT NULL
);

CREATE TABLE story (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    story TEXT NOT NULL,
    epicID INTEGER NOT NULL,
    prioritization INTEGER NOT NULL DEFAULT 1,
    deadline DATE,
    FOREIGN KEY (epicID) REFERENCES epic (id)
);

CREATE TABLE tag (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    tag TEXT UNIQUE NOT NULL
);

CREATE TABLE tag_story (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    tagID INTEGER NOT NULL,
    storyID INTEGER NOT NULL,
    FOREIGN KEY (tagID) REFERENCES tag (id),
    FOREIGN KEY (storyID) REFERENCES story (id)
);

CREATE TABLE task (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    task TEXT NOT NULL,
    storyID INTEGER NOT NULL,
    sprintID INTEGER,
    estimate NUMBER,
    actual NUMBER,
    deadline DATE,
    recurring BOOLEAN,
    status TEXT NOT NULL DEFAULT 'To-Do',
    FOREIGN KEY (storyID) REFERENCES story (id)
    FOREIGN KEY (sprintID) REFERENCES sprint (id)
);

CREATE TABLE work (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    work_date DATE NOT NULL DEFAULT CURRENT_DATE,
    hours_worked NUMBER NOT NULL DEFAULT 0,
    taskID INTEGER NOT NULL,
    status TEXT NOT NULL,
    FOREIGN KEY (taskID) REFERENCES task (id)
);
